mod async_basics;
mod basic_error_handling;
mod borrowing;
mod box_smart_pointer;
mod closures;
mod combinators;
mod comments;
mod concrete_lifetimes;
mod constants_and_statics;
mod control_flow;
mod cpu_intensive_code;
mod creating_threads;
mod custom_errors_1;
mod custom_errors_2;
mod custom_errors_3;
mod custom_errors_4;
mod data_types;
mod deref_coercion;
mod deriving_traits;
mod enums_and_matching;
mod error_stack;
mod function_pointers;
mod functions;
mod generic_lifetimes;
mod generics;
mod implementation_blocks;
mod implementing_iterator_traits;
mod iterating_over_collections;
mod iterator_pattern;
mod message_passing_between_threads;
mod modules;
mod moving_values_into_threads;
mod multiple_error_types;
mod option_and_result;
mod ownership;
mod propagating_errors;
mod rc_smart_pointer;
mod recoverable_errors;
mod refcell_smart_pointer;
mod result_and_option;
mod sharing_state_between_threads;
mod slices;
mod streams;
mod structs;
mod structs_and_lifetime_elision;
mod supertraits;
mod tokio_tasks;
mod trait_objects;
mod traits;
mod tuple_structs;
mod unit_tests;
mod unrecoverable_errors;
mod variables;
mod vectors;

#[tokio::main]
async fn main() {
    variables::code();
    variables::fix_variable_definition();
    variables::fix_variable_definition_2();
    variables::fix_code_with_shadowing();
    data_types::code();
    data_types::boolean();
    data_types::unsigned_int();
    data_types::signed_int();
    data_types::floating_point_numbers();
    data_types::char();
    data_types::string_types();
    data_types::arrays();
    data_types::tuples();
    data_types::type_aliasing();
    constants_and_statics::code();
    constants_and_statics::constants();
    constants_and_statics::statics();
    functions::code();
    functions::definition();
    functions::return_types();
    functions::return_keyword();
    control_flow::code();
    control_flow::if_else();
    control_flow::loop_task();
    control_flow::while_task();
    control_flow::for_task();
    comments::code();
    ownership::code();
    ownership::moving_on_assignment();
    ownership::moving_on_assignment_2();
    ownership::moving_into_function();
    ownership::moving_out_of_function();
    borrowing::code();
    borrowing::immutable_references();
    borrowing::mutable_references_1();
    borrowing::mutable_references_2();
    borrowing::passing_by_reference();
    slices::code();
    slices::string_slice();
    slices::array_slice();
    structs::code();
    structs::struct_definition();
    structs::mutating_structs();
    structs::structs_and_functions();
    implementation_blocks::code();
    implementation_blocks::methods();
    implementation_blocks::associated_functions();
    tuple_structs::code();
    tuple_structs::definition();
    enums_and_matching::code();
    enums_and_matching::definition_1();
    enums_and_matching::definition_2();
    enums_and_matching::exhaustive_requirement();
    enums_and_matching::match_expression();
    enums_and_matching::matching_on_enums_1();
    enums_and_matching::matching_on_enums_2();
    option_and_result::code();
    option_and_result::matching_option();
    option_and_result::matching_option_2();
    option_and_result::if_let();
    option_and_result::matching_result();
    option_and_result::returning_result();
    vectors::code();
    vectors::pushing();
    vectors::removing();
    vectors::fetching();
    vectors::iterating();
    vectors::iterating_and_mutation();
    modules::visibility();
    modules::bringing_item_into_scope();
    modules::multi_file_projects_1();
    modules::multi_file_projects_2();
    modules::re_exporting();
    generics::code();
    generics::generic_type_example();
    generics::defining_generic_types_1();
    generics::defining_generic_types_2();
    generics::implementation_blocks();
    generics::generic_functions();
    traits::code();
    traits::implementing_traits_1();
    traits::implementing_traits_2();
    traits::default_implementations();
    traits::overriding();
    traits::specifying_trait_bounds_1();
    traits::specifying_trait_bounds_2();
    traits::specifying_trait_bounds_3();
    traits::multiple_trait_bounds_1();
    traits::multiple_trait_bounds_2();
    traits::returning_trait_bounds();
    supertraits::code();
    supertraits::implementing_supertraits();
    supertraits::multiple_supertraits();
    trait_objects::code();
    trait_objects::returning_and_passing_to_functions();
    trait_objects::trait_objects_vectors();
    deriving_traits::code();
    deriving_traits::deriving_on_structs();
    deriving_traits::deriving_on_enums();
    concrete_lifetimes::code();
    concrete_lifetimes::lifetimes_of_owned_values();
    concrete_lifetimes::dangling_references();
    concrete_lifetimes::non_lexical_lifetimes();
    generic_lifetimes::code();
    generic_lifetimes::helping_the_borrow_checker();
    generic_lifetimes::complying_with_the_borrow_checker();
    structs_and_lifetime_elision::code();
    structs_and_lifetime_elision::lifetimes_in_structs();
    structs_and_lifetime_elision::lifetime_elision();
    box_smart_pointer::code();
    box_smart_pointer::creation();
    box_smart_pointer::recursive_types();
    rc_smart_pointer::code();
    rc_smart_pointer::counting_refs_1();
    rc_smart_pointer::counting_refs_2();
    refcell_smart_pointer::code();
    refcell_smart_pointer::borrowing();
    refcell_smart_pointer::interior_mutability();
    deref_coercion::code();
    deref_coercion::example();
    deref_coercion::deref_and_deref_mut();
    deref_coercion::shared_ownership_with_mutability();
    unrecoverable_errors::code();
    unrecoverable_errors::panicking();
    recoverable_errors::code();
    recoverable_errors::returning_result_1();
    recoverable_errors::returning_result_2();
    recoverable_errors::returning_result_3();
    recoverable_errors::unwrapping();
    propagating_errors::code();
    propagating_errors::propagating_errors_1();
    propagating_errors::propagating_errors_2();
    result_and_option::code();
    result_and_option::option_to_result();
    result_and_option::result_to_option();
    multiple_error_types::code();
    multiple_error_types::error_trait_object().expect("This shall pass");
    multiple_error_types::multiple_errors_1();
    multiple_error_types::multiple_errors_2();
    basic_error_handling::code();
    basic_error_handling::avoiding_unwrap();
    basic_error_handling::error_propagating();
    custom_errors_1::code();
    custom_errors_1::creating_custom_errors();
    custom_errors_2::code();
    custom_errors_2::converting_errors_1();
    custom_errors_2::converting_errors_2();
    custom_errors_2::error_trait();
    custom_errors_3::code();
    custom_errors_3::error_trait();
    custom_errors_4::code();
    error_stack::code();
    closures::code();
    closures::defining_closures();
    closures::struct_fields();
    closures::mutably_capturing_environment();
    closures::moving_into_closures();
    closures::passing_to_functions();
    closures::returning_from_functions_1();
    closures::returning_from_functions_2();
    function_pointers::code();
    function_pointers::as_parameters();
    function_pointers::coercing_from_closures();
    iterator_pattern::code();
    iterator_pattern::iterator_trait();
    implementing_iterator_traits::code();
    implementing_iterator_traits::into_iterator_1();
    implementing_iterator_traits::into_iterator_2();
    iterating_over_collections::code();
    iterating_over_collections::iterating_immutably();
    iterating_over_collections::iterating_mutably();
    iterating_over_collections::hashmaps();
    combinators::code();
    creating_threads::code();
    creating_threads::joining_1();
    creating_threads::joining_2();
    creating_threads::sleeping();
    moving_values_into_threads::code();
    moving_values_into_threads::moving();
    message_passing_between_threads::code();
    message_passing_between_threads::message_passing_1();
    message_passing_between_threads::message_passing_2();
    sharing_state_between_threads::code();
    sharing_state_between_threads::acquiring_locks();
    sharing_state_between_threads::atomic_ref_count();
    async_basics::code();
    async_basics::awaiting().await;
    async_basics::creating_executor().await;
    cpu_intensive_code::code();
    streams::code();
}
